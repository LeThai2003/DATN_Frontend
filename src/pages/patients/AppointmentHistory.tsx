import WelcomePaytient from '@/components/cards/WelcomeCard';
import { Button, Card, Pagination, Tag, Tooltip } from 'antd';
import Table, { ColumnsType } from 'antd/es/table';
import dayjs from 'dayjs';
import { EyeOutlined } from '@ant-design/icons';
import { appointment, common } from '@/stores/reducers';
import { ModalType } from '@/types/stores/common';
import { useDispatch, useSelector } from 'react-redux';
import { initFilterAppointment } from '@/defaultValues/appointments/appointment_default';
import { selectFilter } from '@/stores/selectors/appointments/appointment.selector';
import { useState } from 'react';
import FilterButton from '@/components/filters/FilterButton';
import FilterForm from '@/components/filters/FilterForm';
import WelcomeCard from '@/components/cards/WelcomeCard';

// üîπ B√°c sƒ© kh√°m
export const employees = [
    {
        employee_id: 1,
        account_id: 10,
        fullname: 'BS. Nguy·ªÖn VƒÉn An',
        gender: 'male',
        specialization_id: 2,
        email: 'an.nguyen@clinic.vn',
        room_id: 101,
        hired_date: '2021-05-10',
        avatar: '/images/doctors/an.jpg',
        specialization: { specialization_id: 2, name: 'N·ªôi t·ªïng qu√°t' },
    },
    {
        employee_id: 2,
        account_id: 11,
        fullname: 'BS. Tr·∫ßn Th·ªã B√≠ch',
        gender: 'female',
        specialization_id: 3,
        email: 'bich.tran@clinic.vn',
        room_id: 102,
        hired_date: '2022-03-12',
        avatar: '/images/doctors/bich.jpg',
        specialization: { specialization_id: 3, name: 'Nhi khoa' },
    },
];

export const services = [
    {
        service_id: 201,
        name: 'Kh√°m n·ªôi t·ªïng qu√°t',
        description: 'Ki·ªÉm tra to√†n di·ªán s·ª©c kh·ªèe, t∆∞ v·∫•n ƒëi·ªÅu tr·ªã v√† ph√≤ng b·ªánh.',
        price: 350000,
        image: '/images/services/general-checkup.jpg',
    },
    {
        service_id: 202,
        name: 'Kh√°m nhi khoa',
        description: 'Kh√°m v√† ƒëi·ªÅu tr·ªã c√°c b·ªánh l√Ω cho tr·∫ª em.',
        price: 420000,
        image: '/images/services/pediatrics.jpg',
    },
    {
        service_id: 203,
        name: 'Kh√°m tai m≈©i h·ªçng',
        description: 'Ch·∫©n ƒëo√°n v√† ƒëi·ªÅu tr·ªã c√°c b·ªánh v·ªÅ tai, m≈©i, h·ªçng.',
        price: 380000,
        image: '/images/services/ent.jpg',
    },
];

// üîπ Danh s√°ch Bu·ªïi kh√°m
export const appointments = [
    {
        appointment_id: 1001,
        patient_id: 1,
        appointment_date: '2025-09-20',
        appointment_hour: '09:30',
        employee_id: 1,
        service_id: 201,
        payment_id: 501,
        price: 350000,
        transaction_code: 987654321,
        status: 'completed',
    },
    {
        appointment_id: 1002,
        patient_id: 1,
        appointment_date: '2025-10-03',
        appointment_hour: '15:00',
        employee_id: 2,
        service_id: 202,
        payment_id: 502,
        price: 420000,
        transaction_code: 987654322,
        status: 'completed',
    },
];

// üîπ K·∫øt qu·∫£ kh√°m (m·ªói bu·ªïi kh√°m 1 k·∫øt qu·∫£)
export const appointmentRecords = [
    {
        record_id: 1,
        appointment_id: 1001,
        height: 170,
        weight: 65,
        blood_pressure: '120/80',
        temperature: 36.8,
        heart_rate: 75,
        symptoms: 'Ho nh·∫π, ƒëau h·ªçng',
        icd10: 'J06.9',
        icd10_value: 'C·∫£m c√∫m kh√¥ng ƒë·∫∑c hi·ªáu',
        notes: 'Khuy√™n b·ªánh nh√¢n u·ªëng nhi·ªÅu n∆∞·ªõc, ngh·ªâ ng∆°i',
        date: '2025-09-20',
    },
    {
        record_id: 2,
        appointment_id: 1002,
        height: 170,
        weight: 66,
        blood_pressure: '118/79',
        temperature: 37.1,
        heart_rate: 78,
        symptoms: 'ƒêau ƒë·∫ßu, ch√≥ng m·∫∑t',
        icd10: 'R51',
        icd10_value: 'ƒêau ƒë·∫ßu',
        notes: 'C·∫ßn theo d√µi n·∫øu t√°i ph√°t th∆∞·ªùng xuy√™n',
        date: '2025-10-03',
    },
];

// üîπ ƒê∆°n thu·ªëc cho t·ª´ng bu·ªïi kh√°m
export const prescriptions = {
    1001: [
        {
            key: '1',
            drug_id: 301,
            drug_name: 'Paracetamol 500mg',
            unit_dosage_id: 1,
            unit_dosage_name: 'Vi√™n',
            dosage: 1,
            meal_time: 'Sau ƒÉn',
            dosage_time: ['S√°ng', 'Chi·ªÅu'],
            duration: 3,
            frequency: 2,
            note: 'Kh√¥ng u·ªëng khi ƒë√≥i',
        },
        {
            key: '2',
            drug_id: 302,
            drug_name: 'Cotrimoxazole 480mg',
            unit_dosage_id: 1,
            unit_dosage_name: 'Vi√™n',
            dosage: 1,
            meal_time: 'Tr∆∞·ªõc ƒÉn',
            dosage_time: ['Tr∆∞a'],
            duration: 5,
            frequency: 1,
            note: 'U·ªëng nhi·ªÅu n∆∞·ªõc',
        },
    ],

    1002: [
        {
            key: '1',
            drug_id: 303,
            drug_name: 'Ibuprofen 200mg',
            unit_dosage_id: 1,
            unit_dosage_name: 'Vi√™n',
            dosage: 1,
            meal_time: 'Sau ƒÉn',
            dosage_time: ['S√°ng', 'T·ªëi'],
            duration: 3,
            frequency: 2,
            note: 'Kh√¥ng d√πng khi ƒëau d·∫° d√†y',
        },
    ],
};

// üîπ Th·ªùi ƒëi·ªÉm u·ªëng thu·ªëc (tham kh·∫£o)
export const dosageTimes = [
    { time_id: 1, name: 'S√°ng', description: 'U·ªëng v√†o bu·ªïi s√°ng' },
    { time_id: 2, name: 'Tr∆∞a', description: 'U·ªëng v√†o bu·ªïi tr∆∞a' },
    { time_id: 3, name: 'Chi·ªÅu', description: 'U·ªëng v√†o bu·ªïi chi·ªÅu' },
    { time_id: 4, name: 'T·ªëi', description: 'U·ªëng v√†o bu·ªïi t·ªëi' },
];

// üîπ M·ªëi quan h·ªá v·ªõi b·ªØa ƒÉn (tham kh·∫£o)
export const mealRelations = [
    { relation_id: 1, name: 'Tr∆∞·ªõc ƒÉn', description: 'U·ªëng tr∆∞·ªõc khi ƒÉn 30 ph√∫t' },
    { relation_id: 2, name: 'Sau ƒÉn', description: 'U·ªëng sau khi ƒÉn 30 ph√∫t' },
];

const AppointmentHistory = () => {
    const dispatch = useDispatch();

    const filterAppointment = useSelector(selectFilter);

    const [isOpenAppointmentFilter, setIsOpenAppointmentFilter] = useState(false);

    const patientAppointments =
        appointments
            .filter((a) => a.patient_id === 1)
            .map((a) => ({
                ...a,
                doctor: employees.find((e) => e.employee_id === a.employee_id),
                record: appointmentRecords.find((r) => r.appointment_id === a.appointment_id),
                prescriptions: prescriptions[a.appointment_id] || [],
                service: services.find((s) => s.service_id === a.service_id),
            })) || [];

    const handleOpenViewAppointmentRecord = (data) => {
        console.log(data);
        dispatch(
            common.actions.setShowModal({
                type: ModalType.APPOINTMENT_PATIENT,
                variant: 'view',
                data: data,
            })
        );
    };

    const appointmentColumns: ColumnsType<any> = [
        {
            title: 'M√£ bu·ªïi kh√°m',
            dataIndex: 'appointment_id',
            key: 'appointment_id',
            width: 120,
        },
        {
            title: 'Ng√†y kh√°m',
            dataIndex: 'appointment_date',
            key: 'appointment_date',
            render: (date) => dayjs(date).format('DD/MM/YYYY'),
            width: 130,
        },
        {
            title: 'Gi·ªù kh√°m',
            dataIndex: 'appointment_hour',
            key: 'appointment_hour',
            render: (hour) => dayjs(hour, 'HH:mm').format('HH:mm'),
            width: 100,
        },
        {
            title: 'B√°c sƒ© kh√°m',
            dataIndex: ['doctor', 'fullname'],
            key: 'doctor',
            width: 180,
        },
        // {
        //     title: 'Chuy√™n khoa',
        //     dataIndex: ['doctor', 'specialization', 'name'],
        //     key: 'specialization',
        //     width: 150,
        // },
        {
            title: 'D·ªãch v·ª•',
            dataIndex: ['service', 'name'],
            key: 'service_name',
            width: 100,
            ellipsis: true,
        },
        {
            title: 'Gi√° d·ªãch v·ª•',
            dataIndex: 'price',
            key: 'price',
            render: (price) => `${price.toLocaleString()} ‚Ç´`,
            width: 120,
        },
        {
            title: 'Tr·∫°ng th√°i',
            dataIndex: 'status',
            key: 'status',
            width: 120,
            render: (status) => {
                const color =
                    status === 'completed' ? 'green' : status === 'pending' ? 'orange' : 'red';
                const label =
                    status === 'completed'
                        ? 'Ho√†n th√†nh'
                        : status === 'pending'
                        ? 'ƒêang x·ª≠ l√Ω'
                        : 'ƒê√£ h·ªßy';
                return <Tag color={color}>{label}</Tag>;
            },
        },
        {
            title: 'Ghi ch√∫ / K·∫øt qu·∫£',
            key: 'record',
            render: (_, record) => record.record?.icd10_value || '‚Äî',
            width: 200,
        },
        {
            title: 'H√†nh ƒë·ªông',
            key: 'actions',
            width: 130,
            align: 'center',
            render: (_, record) =>
                record?.employee_id == -1 ? null : (
                    <Tooltip title={<>Xem chi ti·∫øt</>}>
                        <Button
                            color="primary"
                            variant="filled"
                            icon={<EyeOutlined />}
                            onClick={() => {
                                handleOpenViewAppointmentRecord(record);
                            }}
                            className=""
                            size="small"
                        />
                    </Tooltip>
                ),
        },
    ];

    const FilterAppointmentFields = [
        { key: 'search', type: 'text', placeholder: 'T√¨m bu·ªïi kh√°m' },
        { key: 'startDate', type: 'date', placeholder: 'T·ª´ ng√†y' },
    ];

    const handleFilterAppointmentChange = (key, value) => {
        dispatch(appointment.actions.setFilterAppointment({ ...filterAppointment, [key]: value }));
        console.log(filterAppointment);
    };

    const handleResetAppointmentFilter = () =>
        dispatch(appointment.actions.setFilterAppointment({ initFilterAppointment }));

    const handleApplyAppointmentFilter = () => {
        console.log(filterAppointment);
    };

    const handleChangeAppointmentPage = (e) => {
        console.log(e);
        dispatch(
            appointment.actions.setFilterAppointment({
                ...filterAppointment,
                pageNo: e - 1,
            })
        );
    };

    return (
        <div className="relative">
            <div className="container min-h-screen">
                <div className="pt-[86px]">
                    <WelcomeCard name="Nguy·ªÖn VƒÉn Name" />
                    <section className="py-2 ">
                        <Card title="L·ªãch s·ª≠ kh√°m b·ªánh">
                            {patientAppointments.length ? (
                                <div>
                                    <div className="mb-3">
                                        {!isOpenAppointmentFilter && (
                                            <FilterButton
                                                onClick={() => setIsOpenAppointmentFilter(true)}
                                            />
                                        )}

                                        {isOpenAppointmentFilter && (
                                            <FilterForm
                                                fields={FilterAppointmentFields}
                                                values={filterAppointment}
                                                onChange={handleFilterAppointmentChange}
                                                onReset={handleResetAppointmentFilter}
                                                onApply={handleApplyAppointmentFilter}
                                                onClose={() => setIsOpenAppointmentFilter(false)}
                                            />
                                        )}
                                    </div>
                                    <Table
                                        dataSource={patientAppointments}
                                        columns={appointmentColumns}
                                        rowKey="appointment_id"
                                        pagination={false}
                                        scroll={{ x: 'max-content', y: '400px' }}
                                    />
                                    <div className="flex justify-end mt-4">
                                        <Pagination
                                            current={0}
                                            pageSize={2}
                                            onChange={(e) => {
                                                handleChangeAppointmentPage(e);
                                            }}
                                            total={5}
                                        />
                                    </div>
                                </div>
                            ) : (
                                <div>
                                    <p>Kh√¥ng t√¨m th·∫•y l·ªãch s·ª≠ kh√°m b·ªánh.</p>
                                </div>
                            )}
                        </Card>
                    </section>
                </div>
            </div>
        </div>
    );
};

export default AppointmentHistory;
